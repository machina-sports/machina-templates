workflow:

  # oxylabs-web-scraping
  name: "oxylabs-web-scraping"
  title: "Oxylabs - Web Scraping"
  description: "Workflow to scrape a web page."
  context-variables:
    debugger:
      enabled: true
    machina-ai:
      api_key: "$TEMP_CONTEXT_VARIABLE_SDK_OPENAI_API_KEY"
    oxylabs:
      username: "$TEMP_CONTEXT_VARIABLE_OXYLABS_USERNAME"
      password: "$TEMP_CONTEXT_VARIABLE_OXYLABS_PASSWORD"
  inputs:
    parse: "($.get('parse', 'false') == 'true') and True or False"
    render: "$.get('render')"
    source: "$.get('source', 'universal')"
    url: "$.get('url')"
  outputs:
    parsed-content: "$.get('parsed-content')"
    workflow-status: "'executed'"
  tasks:

    - type: "connector"
      name: "oxylabs-post-queries"
      description: "Scrape a web page."
      condition: "$.get('url') is not None"
      connector:
        name: "oxylabs"
        command: "post-queries"
      inputs:
        body: |
          {
            "parse": $.get('parse'),
            "render": $.get('render'),
            "source": $.get('source'),
            "url": $.get('url'),
          }
      outputs:
        scraping-content: "$.get('results', [])[0].get('content')"

    - type: "mapping"
      name: "oxylabs-scraping-mapping"
      description: "Mapping data from oxylabs scraping"
      condition: "$.get('scraping-content') is not None"
      inputs:
        input-scraping-content: "$.get('scraping-content')"
      outputs:
        transcript-content: "$.get('parsed-content')"

    - type: "prompt"
      name: "prompt-transcript-subject-analysis"
      description: "Prompt to analyze the transcript subject"
      condition: "$.get('transcript-content') is not None"
      connector:
        name: "machina-ai"
        command: "invoke_prompt"
        model: "gpt-4.1"
      inputs:
        input-content: "$.get('transcript-content')"
      outputs:
        slices: "$.get('slices')"
        slices-bulk: |
          [
            {
              'subject': c.get('subject', ''),
              'script_code': c.get('script_code', ''),
              'start_index': c.get('start_index', ''),
              'end_index': c.get('end_index', ''),
              'content': c.get('content', ''),
              'items': $.(transcript-content)[c.get('start_index', 0):c.get('end_index', 0)]
            }
            for c in $.get('slices', [])
          ]

    - type: "prompt"
      name: "prompt-transcript-analysis"
      description: "prompt-transcript-analysis"
      condition: "$.get('transcript-content') is not None"
      connector:
        name: "machina-ai"
        command: "invoke_prompt"
        model: "gpt-4o"
      inputs:
        doc-video-transcript: $.get('slices-bulk', [])
      outputs:
        doc-video-analysis: "$"
        doc-video-analysis-bulk: |
          [
            {
              'subject': c.get('title', ''),
              'text': c.get('content', ''),
              'title': f"{c.get('title', '')}",
              'metadata': {
                'content_type': 'transcript-analysis',
                'video_code': '$.(video-code)',
                'script_code': c.get('script_code'),
                'language': 'en'
              }
            }
            for c in $.get('snippets', [])
          ]

    - type: "document"
      name: "bulk-transcript-analysis"
      condition: "$.get('transcript-content') is not None"
      description: "Update the snippets."
      config:
        action: "bulk-save"
        embed-vector: true
        force-update: true
      connector:
        name: "machina-ai"
        command: "invoke_embedding"
        model: "text-embedding-3-small"
      document_name: "'content-snippet'"
      documents:
        items: "$.get('parsed-items')"
      inputs:
        parsed-items: |
          [
            *$.get('doc-video-analysis-bulk', [])
          ]
