workflow:
  name: "sportradar-nfl-sync-games"
  title: "Sportradar NFL Sync Games"
  description: "Workflow to sync NFL games."
  context-variables:
    debugger:
      enabled: true
    sportradar-nfl:
      api_key: "$TEMP_CONTEXT_VARIABLE_SPORTRADAR_SOCCER_V4_API_KEY"
    machina-ai:
      api_key: "$TEMP_CONTEXT_VARIABLE_SDK_OPENAI_API_KEY"
  inputs:
    season_year: "$.get('season_year', '2025')"
    season_type: "$.get('season_type', 'PRE')"
  outputs:
    events: "$.get('events')"
    workflow-status: "$.get('events', []) is None and 'skipped' or 'executed'"
  tasks:

    # task-load-games
    - type: "connector"
      name: "task-load-games"
      description: "Get a season games from SportRadar"
      connector:
        name: "sportradar-nfl"
        command: "get-games/{season_year}/{season_type}/{data_type}"
        command_attribute:
          season_year: "$.get('season_year')"
          season_type: "$.get('season_type')"
          data_type: "'schedule.json'"
      inputs:
        api_key: "$.get('api_key')"
      outputs:
        games: "$"
        games_parsed: |
          [
            {
              **game,
              'metadata': {
                'event_code': game.get('id', ''),
                'team_ids': [game.get('home', {}).get('id', ''), game.get('away', {}).get('id', '')],
              },
              'start_time': datetime.strptime(game.get('scheduled').replace('+00:00', 'Z'), '%Y-%m-%dT%H:%M:%SZ'),
              'title': f"{game.get('home', {}).get('name', '')} v {game.get('away', {}).get('name', '')}",
              'selected': False
            }
            for week in $.get('weeks', [])
            for game in week.get('games', [])
          ]

    # bulk-save-games
    - type: "document"
      name: "bulk-save-games"
      condition: "$.get('games_parsed') is not None"
      description: "Bulk save the games."
      config:
        action: "bulk-update"
        embed-vector: false
        force-update: true
      document_name: "'nfl-game'"
      documents:
        items: "$.get('games_parsed')"
      inputs:
        games_parsed: "$.get('games_parsed')"

    # iptc-sportradar-event-nfl-mapping
    - type: mapping
      name: iptc-sportradar-event-nfl-mapping
      title: IPTC | Sportradar Event NFL Mapping
      description: Mapping data from sportradar to IPTC events
      condition: len($.get('games_parsed')) > 0
      inputs:
        schedules: $.get('games_parsed')
      outputs:
        all_events: $.get('sport_schema_events')
        all_events_ids: |
          [str(f.get('@id', '')) for f in $.get('sport_schema_events', [])]

    # load-events-by-ids
    - type: document
      name: load-events-by-ids
      condition: $.get('all_events_ids') is not None
      description: Load existing events by IDs.
      config:
        action: search
        search-limit: 10000
        search-vector: false
      filters:
        metadata.event_code: |
          {'$in': $.(all_events_ids)}
      inputs:
        name: "'sport:Event'"
      outputs:
        existing_events_ids: |
          [
            fixture.get('metadata', {}).get('event_code', '')
            for fixture in $.get('documents', [])
          ]

    # task-bulk-save-events
    - type: document
      name: task-bulk-save-events
      description: Bulk save the individual events.
      condition: len($.get('games_parsed')) > 0 and $.get('all_events_ids') is not None and len($.get('all_events_ids', [])) > len($.get('existing_events_ids', []))
      config:
        action: bulk-update
        embed-selector: $.get('title')
        embed-vector: true
        force-update: true
      connector:
        name: machina-ai
        command: invoke_embedding
        model: text-embedding-3-small
      document_name: "'sport:Event'"
      documents:
        items: $.get('new_events_list')
      inputs:
        new_events_list: |
          [
            {
              **f,
              'metadata': {
                'event_code': str(f.get('@id', '')),
                'sport_name': str(f.get('schema:sportName', ''))
              },
              'title': f"{f.get('sport:competition', {}).get('name', '')} - {f.get('name', '')}"
            }
            for f in $.get('all_events', [])
            if str(f.get('@id', '')) not in $.(existing_events_ids)
          ]